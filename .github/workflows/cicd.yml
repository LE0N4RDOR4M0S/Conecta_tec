name: CI/CD - Build and Deploy

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
      - name: Configurar o Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build e Push da imagem AMD64
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/vitrine-tec:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}-amd64

  build-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
      - name: Configurar QEMU
        uses: docker/setup-qemu-action@v3
      - name: Configurar o Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build e Push da imagem ARM64
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/vitrine-tec:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}-arm64

  create-manifest:
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64]
    steps:
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Criar e enviar o manifest
        run: |
          BASE_TAG=${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/vitrine-tec:$BASE_TAG \
            --amend ${{ secrets.DOCKERHUB_USERNAME }}/vitrine-tec:$BASE_TAG-amd64 \
            --amend ${{ secrets.DOCKERHUB_USERNAME }}/vitrine-tec:$BASE_TAG-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/vitrine-tec:$BASE_TAG

  deploy:
    needs: create-manifest
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
      - name: Copiar o arquivo Docker Compose para o servidor
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "docker-compose.yml"
          target: "~/vitrine-tec"
      - name: Executar o deploy com Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd ~/vitrine-tec
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            docker compose pull app # Puxa a imagem com a tag final (ex: latest)
            docker compose up -d --remove-orphans