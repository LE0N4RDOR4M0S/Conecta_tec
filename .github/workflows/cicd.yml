name: CI/CD - Build and Deploy

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar o QEMU para emulação ARM
        uses: docker/setup-qemu-action@v3

      - name: Configurar o Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache de camadas Docker
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-arm-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-arm-

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determinar a tag da imagem
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/vitrine-tec
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/develop' }}

      - name: Build e Push da imagem para ARM64
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          provenance: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Mover cache para uso futuro
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    steps:
      - name: Executar o deploy com Tag Dinâmica
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            if [[ "${{ github.ref_name }}" == "main" ]]; then
              export PROJECT_DIR="prod"
              export HOST_PORT="8080"
              export APP_TAG="latest"
            else
              export PROJECT_DIR="dev"
              export HOST_PORT="8888"
              export APP_TAG="dev"
            fi
            
            mkdir -p ~/$PROJECT_DIR
            
            echo '${{ secrets.DOCKER_COMPOSE_CONTENT }}' > ~/$PROJECT_DIR/docker-compose.yml
            
            sed -i "s/8080:8080/$HOST_PORT:8080/" ~/$PROJECT_DIR/docker-compose.yml
            
            cd ~/$PROJECT_DIR
            
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            docker compose pull app
            
            docker compose -p "vitrine-$PROJECT_DIR" up -d --remove-orphans